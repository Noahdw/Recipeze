// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addRecipe = `-- name: AddRecipe :one
INSERT INTO recipes (
    url,
    name,
    description
) VALUES (
    $1, $2, $3
)
RETURNING id
`

type AddRecipeParams struct {
	Url         pgtype.Text
	Name        pgtype.Text
	Description pgtype.Text
}

func (q *Queries) AddRecipe(ctx context.Context, arg AddRecipeParams) (int32, error) {
	row := q.db.QueryRow(ctx, addRecipe, arg.Url, arg.Name, arg.Description)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteRecipeByID = `-- name: DeleteRecipeByID :exec
DELETE FROM recipes where id = $1
`

func (q *Queries) DeleteRecipeByID(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRecipeByID, id)
	return err
}

const getRecipeByID = `-- name: GetRecipeByID :one
SELECT id, url, name, description, created_at from recipes WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRecipeByID(ctx context.Context, id int32) (Recipe, error) {
	row := q.db.QueryRow(ctx, getRecipeByID, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getRecipes = `-- name: GetRecipes :many
SELECT id, url, name, description, created_at FROM recipes
`

func (q *Queries) GetRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.Query(ctx, getRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
